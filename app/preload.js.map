{"version":3,"file":"preload.js","mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,QAAQ,I,mBCRX,IAAIC,EAAsB,CCA1BA,EAAyBP,IACH,oBAAXQ,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeX,EAASQ,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeX,EAAS,aAAc,CAAEY,OAAO,GAAO,G,YCL9D,MAAM,EAA+BC,QAAQ,YCGvCC,EAAU,CACdC,IAAAA,CAAKC,EAAiBJ,GACpBK,EAAAA,YAAYF,KAAKC,EAASJ,EAC5B,EACAM,EAAAA,CAAGF,EAAiBG,GAClB,MAAMC,EAAeA,CAACC,KAA6BC,IACjDH,KAAYG,GAGd,OAFAL,EAAAA,YAAYC,GAAGF,EAASI,GAEjB,KACLH,EAAAA,YAAYM,eAAeP,EAASI,EAAa,CAErD,G,OAGFI,EAAAA,cAAcC,kBAAkB,MAAOX,GAEvCU,EAAAA,cAAcC,kBAAkB,WAAY,CAE1CC,SAAUA,IAAMT,EAAAA,YAAYU,OAAO,YACnCC,SAAUA,IAAMX,EAAAA,YAAYU,OAAO,YACnCE,MAAOA,IAAMZ,EAAAA,YAAYU,OAAO,SAChCG,YAAaA,IAAMb,EAAAA,YAAYU,OAAO,eAGtCI,SAAWC,GAAyCf,EAAAA,YAAYU,OAAO,WAAYK,GACnFC,SAAUA,IAAMhB,EAAAA,YAAYU,OAAO,YAGnCO,oBAAsBC,GAAiBlB,EAAAA,YAAYU,OAAO,8BAA+BQ,GACzFC,WAAYA,CAACD,EAAcE,IAAwBpB,EAAAA,YAAYU,OAAO,yBAA0BQ,EAAME,GAGtGC,iBAAmBC,GAAgBtB,EAAAA,YAAYU,OAAO,qBAAsBY,GAC5EC,aAAeD,GAAgBtB,EAAAA,YAAYU,OAAO,iBAAkBY,GACpEE,iBAAkBA,CAACF,EAAaG,IAAmBzB,EAAAA,YAAYU,OAAO,aAAcY,EAAKG,GACzFC,mBAAqBC,GAAmB3B,EAAAA,YAAYU,OAAO,kBAAmBiB,GAG9EC,aAAeb,GACbf,EAAAA,YAAYU,OAAO,mBAAoBK,K","sources":["webpack://ankibee/webpack/universalModuleDefinition","webpack://ankibee/webpack/bootstrap","webpack://ankibee/webpack/runtime/make namespace object","webpack://ankibee/external node-commonjs \"electron\"","webpack://ankibee/./main/preload.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","import { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron'\nimport { WordCard } from '../renderer/types/deck'\n\nconst handler = {\n  send(channel: string, value: unknown) {\n    ipcRenderer.send(channel, value)\n  },\n  on(channel: string, callback: (...args: unknown[]) => void) {\n    const subscription = (_event: IpcRendererEvent, ...args: unknown[]) =>\n      callback(...args)\n    ipcRenderer.on(channel, subscription)\n\n    return () => {\n      ipcRenderer.removeListener(channel, subscription)\n    }\n  },\n}\n\ncontextBridge.exposeInMainWorld('ipc', handler)\n\ncontextBridge.exposeInMainWorld('electron', {\n  // Window control methods\n  minimize: () => ipcRenderer.invoke('minimize'),\n  maximize: () => ipcRenderer.invoke('maximize'),\n  close: () => ipcRenderer.invoke('close'),\n  isMaximized: () => ipcRenderer.invoke('isMaximized'),\n\n  // Deck management methods\n  saveDeck: (data: { cards: any[], name: string }) => ipcRenderer.invoke('saveDeck', data),\n  loadDeck: () => ipcRenderer.invoke('loadDeck'),\n\n  // Dictionary methods\n  fetchWordDefinition: (word: string) => ipcRenderer.invoke('dictionary:fetch-definition', word),\n  fetchAudio: (word: string, region: 'us' | 'gb') => ipcRenderer.invoke('dictionary:fetch-audio', word, region),\n\n  // Audio cache methods\n  checkAudioExists: (key: string) => ipcRenderer.invoke('audio:check-exists', key),\n  getAudioPath: (key: string) => ipcRenderer.invoke('audio:get-path', key),\n  saveAudioToCache: (key: string, buffer: Buffer) => ipcRenderer.invoke('audio:save', key, buffer),\n  clearOldAudioCache: (maxAge: number) => ipcRenderer.invoke('audio:clear-old', maxAge),\n\n  // Anki export methods\n  exportToAnki: (data: { cards: WordCard[]; deckName: string }) => \n    ipcRenderer.invoke('deck:export-anki', data),\n})\n\nexport type IpcHandler = typeof handler\n"],"names":["root","factory","exports","module","define","amd","a","i","global","__webpack_require__","Symbol","toStringTag","Object","defineProperty","value","require","handler","send","channel","ipcRenderer","on","callback","subscription","_event","args","removeListener","contextBridge","exposeInMainWorld","minimize","invoke","maximize","close","isMaximized","saveDeck","data","loadDeck","fetchWordDefinition","word","fetchAudio","region","checkAudioExists","key","getAudioPath","saveAudioToCache","buffer","clearOldAudioCache","maxAge","exportToAnki"],"sourceRoot":""}